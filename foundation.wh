#! solidwire.version 1

# This is the main header that contains basic
# macros and components that could be used inside
# SolidWire documents.

@header
    @types
    
        # Core types
        Any: "Any kind of object or value",
        object: "Same as any",
        cardinality: "Cardinality object",
        selector: "A selector string",
        None: "The value is null",
        nil: "The same as `None`",
        null: "The same as `None`",
        int: "Integer value", 
        integer: "Same as `int`",
        double: "Double precision number",
        float: "Float precision number",
        number: "Any kind of number",
        str: "Single line string value. Similar to `<input type="text">`.",
        string: "The same as `str`".
        textfield: "The same as `str`",
        text: "Multi line string value. Similar to `<textarea></textarea>`.",
        textarea: "The same as `text`",
        dict: "A dictionary object. Similar to JSON",
        list: "A list of values separated by comma inside `[]` brackets",
        bool: "One of values in [true, false, yes, no] (ignoring case) Similar to a checkbox.",
        boolean: "The same as `bool`",
        checkbox: "The same as `bool`",
        Yes: "The same as `true`",
        true: "A boolean with value 1",
        false: "A boolean with value 0",
        No: "The same as `false`",
        pointer: "A reference to a template. Alternative syntax `ptr`.",
        ptr: "A reference to a template. Alternative syntax of `pointer`", 
        pagereference: "The same as `pointer`",
        img: "Image value. Similar to `<img src="">`.",
        image: "Same as `img`"
        

        # Custom types
        url: "A string value that conforms to an `URL` format.",
        email: "A string value that conforms to an `email` format.",
        password: "A string value that is stored in a secure way",
        isodate: "An ISO 8601 with timezone formatted date string.",
        unix: "An unix timestamp value.",
        timestamp: "The same as `unix`.",
        user: "The user object of ProcessWire.",
        role: "The role object of ProcessWire.",
        permission: "Permission for the role."
    
    @end

    @components
        # Syntax: def <name>(<param1>, <param2>, ...) -> <return type>

        # Returns an automatic incremented number 
        def autoincrement() -> int
        
        # The same as autoincrement()
        def serial() -> int 

        # Returns an unique id uuidv4
        # https://en.wikipedia.org/wiki/Universally_unique_identifier
        def uuidv4() -> str

        # Determines the default value that this field must have 
        # on save if the provided value is empty.
        def default(value:Any) -> Any

        # Tells if the field should open
        def open() -> Any

        # Tells if the field should close
        def close() -> Any

        # Defines a label for the field
        def label(values:dict) -> Any
        
        # Fieldset is used to group different
        # fields related to a context.
        # Usage: 
        #
        # fielset('seo').label({'default':'SEO'}).open()
        #
        # # Example field inside fieldset 'seo'
        # meta_description:str
        #
        # fieldset('seo').close()

        def fieldset(name:str) -> Any

        # Hash the string with a defined algorithm
        # Possible values:
        # md5, bcrypt, sha256
        def hash(value:str) -> str
        
        # String modifiers
        def uppercase(value:str) -> str
        def lowercase(value:str) -> str
        def titlecase(value:str) -> str
        def trim(input:str, chars:list=WHITESPACE) -> str
        def ltrim(input:str, chars:list=WHITESPACE) -> str
        def rtrim(input:str, chars:list=WHITESPACE) -> str

        # Defines rules that the field must pass to be valid
        def rules(values:dict) -> Any
        
        # Array
        def array(size:cardinality, component:object) -> list
        def reference(template:pointer, sel:selector=None) -> ptr
        
        
    @end


    #! region - "Template Macros"

    # Strong and weak are flags used in templates
    # to tell a how the bounds between parent children are.

    # Strong relationships tells that children could not be deleted
    # unless the parent is deleted. 
    @macro strong
        strong = True,
        weak = False
    @end

    # Weak is the default bound for templates.
    # Means that it can be deleted any time.
    @macro weak
        weak = True,
        strong = False
    @end

    # Instance quantity. How many copies can a page with the same template exists?.
    @macro once
        # How many instances of this template are allowed
        max_instances = 1
    @end
    
    @macro only(quantiy:int = 1)
        max_instances = quantity
    @end

    # The default instance quantity has no limits.
    @macro unlimited
        # Zero means without limits
        max_instances = 0
    @end

    #! region - "Field Macros"

    @macro required
        required: True
    @end

    @macro id
        # This is the page id created by ProcessWire
        id: int.default(autoincrement()).rules({required:true})
    @end

    @macro name
        # This is the page name field created by ProcessWire
        name: str.rules({required:true})
    @end

    @macro title
        # This is the page title field created by ProcessWire
        title: str
    @end

    @macro email
        # This is the email field created by ProcessWire
        email: email
    @end

    @macro password
        # This is the password field created by ProcessWire
        password: password.rules({min_length:6, required:true}).hash('bcrypt')
    @end
@end
